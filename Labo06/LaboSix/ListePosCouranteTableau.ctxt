#BlueJ class context
comment0.target=ListePosCouranteTableau
comment0.text=\r\n\ CLASSE\ A\ COMPLETER...\r\n\ \r\n\ Cette\ classe\ implemente\ le\ TDA\ Liste\ avec\ position\ courante.\r\n\ \r\n\ -\ Les\ operations\ se\ font\ par\ rapport\ a\ une\ position\ courante\ maintenue\ par\ la\r\n\ \ \ liste.\ Les\ services\ offerts\ permettent\ de\ deplacer\ cette\ position\ courante\r\n\ \ \ ou\ consulter\ l'element\ a\ cette\ position\ courante.\r\n\ \r\n\ -\ L'insertion\ et\ la\ suppression\ se\ font\ toujours\ a\ la\ position\ courante.\r\n\ \r\n\ -\ ELEMENT\ COURANT\r\n\ \ \ Lorsque\ cette\ liste\ n'est\ pas\ vide,\ la\ position\ courante\ refere\ toujours\ \r\n\ \ \ a\ un\ element\ dans\ cette\ liste\ nomme\ element\ courant.\r\n\r\n\ DECISIONS\ D'IMPLEMENTATION\ \:\r\n\ \r\n\ -\ La\ structure\ de\ donnees\ sous-jacente\ pour\ l'implementation\ de\ cette\ liste\r\n\ \ \ est\ un\ tableau\ statique.\r\n\ \r\n\ -\ La\ capacite\ refere\ au\ nombre\ maximum\ d'elements\ que\ peut\ contenir\ cette\ \r\n\ \ \ liste\r\n\ \r\n\ -\ IMPLEMENTATION\ STATIQUE\ \:\ \r\n\ \ \ Cette\ liste\ a\ une\ capacite\ fixe\ qui\ une\ fois\ atteinte,\ ne\ permet\ plus\r\n\ \ \ l'ajout\ d'autres\ elements.\ \r\n\ \r\n\ -\ Tous\ les\ services\ requerant\ une\ liste\ non\ vide\ levent\ une\ exception\ \r\n\ \ \ explicite\ ListeVideException\ lorsqu'on\ les\ appelle\ sur\ une\ liste\ vide.\r\n\ \r\n\ -\ Le\ service\ d'insertion\ leve\ une\ exception\ explicite\ ListePleineException\ \r\n\ \ \ lorsque\ la\ liste\ est\ pleine,\ et\ que\ l'ajout\ ne\ peut\ donc\ pas\ etre\ effectue.\r\n\ \r\n\ NOTE\ \:\r\n\ \ \ Le\ choix\ d'utiliser\ des\ exceptions\ explicites\ (plutot\ qu'implicites)\ est\ \r\n\ \ \ simplement\ pour\ vous\ donner\ la\ chance\ de\ pratiquer\ la\ gestion\ des\ exceptions\r\n\ \ \ lorsque\ vous\ utiliserez\ des\ variables\ de\ ce\ type\ (dans\ vos\ tests,\ par\ exemple).\r\n\r\n\ @author\ Melanie\ Lord\r\n\ @version\ A2018\r\n
comment1.params=capacite
comment1.target=ListePosCouranteTableau(int)
comment1.text=\r\n\ Construit\ une\ liste\ vide,\ de\ la\ capacite\ donnee\ en\ parametre.\r\n\r\n\ @param\ capacite\ le\ maximum\ d'elements\ pouvant\ etre\ ajoutes\ a\ cette\ liste\r\n\ \ \ \ \ \ \ \ NOTE\ \:\ on\ suppose\ que\ capacite\ est\ >\=\ 0.\r\n
comment10.params=
comment10.target=boolean\ setPosSuivant()
comment10.text=\r\n\ Met\ la\ position\ courante\ sur\ l'element\ qui\ suit\ l'element\ courant.\r\n\ Si\ la\ position\ courante\ est\ a\ la\ fin\ de\ cette\ liste\ avant\ l'appel,\ \r\n\ elle\ demeure\ inchangee.\r\n\ \r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ vide\r\n\ \r\n\ @return\ true\ si\ la\ position\ courante\ a\ ete\ deplacee\ sur\ le\ suivant,\ \r\n\ \ \ \ \ \ \ \ \ false\ sinon\r\n\ @throws\ ListeVideException\ si\ cette\ liste\ est\ vide\ avant\ l'appel\r\n
comment11.params=element
comment11.target=void\ inserer(java.lang.Object)
comment11.text=\r\n\ Insere\ l'element\ donne\ dans\ cette\ liste,\ a\ la\ position\ courante,\ apres\r\n\ avoir\ deplace\ d'une\ position\ vers\ la\ droite\ l'element\ courant\ et\ tous\ \r\n\ les\ elements\ qui\ le\ suivent.\r\n\ \r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ pleine.\r\n\ \r\n\ CONSEQUENTS\ \:\ \r\n\ \ \ \ -\ La\ position\ courante\ demeure\ inchangee,\ et\ l'element\ ajoute\ se\ \r\n\ \ \ \ \ \ trouve\ a\ la\ position\ courante\ (il\ devient\ l'element\ courant).\r\n\ \ \ \ -\ Il\ y\ a\ un\ element\ de\ plus\ dans\ cette\ liste.\r\n\ \r\n\ @param\ element\ l'element\ a\ inserer\ a\ la\ position\ courante\r\n\ @throws\ ListePleineException\ si\ cette\ liste\ est\ pleine\ avant\ l'appel\r\n
comment12.params=element
comment12.target=void\ ajouterFin(java.lang.Object)
comment12.text=\r\n\ Ajoute\ l'element\ donne\ a\ la\ suite\ du\ dernier\ element\ (a\ la\ fin\ de\ cette\r\n\ liste).\ L'element\ ajoute\ devient\ l'element\ courant.\r\n\ \r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ pleine.\r\n\ \r\n\ CONSEQUENTS\ \:\ \r\n\ \ \ \ -\ La\ position\ courante\ est\ sur\ le\ dernier\ element\ de\ cette\ liste\r\n\ \ \ \ \ \ (celui\ qu'on\ vient\ d'ajouter)\r\n\ \ \ \ -\ Il\ y\ a\ un\ element\ de\ plus\ dans\ cette\ liste.\r\n\ \r\n\ @param\ element\ l'element\ a\ inserer\ a\ la\ position\ courante\r\n\ @throws\ ListePleineException\ si\ cette\ liste\ est\ pleine\ avant\ l'appel\r\n
comment13.params=
comment13.target=java.lang.Object\ supprimer()
comment13.text=\r\n\ Supprime\ de\ cette\ liste\ l'element\ courant\ (celui\ qui\ se\ trouve\ a\ \r\n\ la\ position\ courante),\ en\ decalant\ d'une\ position\ vers\ la\ gauche\r\n\ tous\ les\ elements\ qui\ venaient\ apres\ l'element\ courant.\r\n\ \r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ vide.\r\n\ \r\n\ CONSEQUENTS\ \:\ \r\n\ \ \ \ -\ Il\ y\ a\ un\ element\ de\ moins\ dans\ cette\ liste\r\n\ \ \ \ -\ La\ position\ courante\ se\ trouve\ sur\ l'element\ qui\ venait\ juste\ \r\n\ \ \ \ \ \ apres\ l'element\ courant\ avant\ l'appel\ ou\ se\ trouve\ sur\ le\ dernier\r\n\ \ \ \ \ \ element\ si\ l'element\ a\ supprimer\ etait\ le\ dernier.\r\n\ \r\n\ @return\ l'element\ supprime\ de\ cette\ liste.\r\n\ @throws\ ListeVideException\ si\ cette\ liste\ est\ vide\ avant\ l'appel\r\n
comment14.params=
comment14.target=void\ vider()
comment14.text=\r\n\ Retire\ tous\ les\ elements\ de\ cette\ liste.\r\n\ \r\n\ CONSEQUENT\ \:\ la\ liste\ ne\ contient\ aucun\ element,\ estVide()\ retourne\ true.\r\n
comment15.params=tab\ debut\ fin
comment15.target=void\ decalerGauche(java.lang.Object[],\ int,\ int)
comment16.params=tab\ debut\ fin
comment16.target=void\ decalerDroite(java.lang.Object[],\ int,\ int)
comment2.params=
comment2.target=ListePosCouranteTableau()
comment2.text=\r\n\ Construit\ une\ liste\ vide,\ d'une\ capacite\ \=\ CAPACITE_PAR_DEFAUT.\r\n
comment3.params=
comment3.target=int\ taille()
comment3.text=\r\n\ Permet\ d'obtenir\ la\ taille\ de\ cette\ liste\ (son\ nombre\ d'elements).\r\n\r\n\ @return\ la\ taille\ de\ cette\ liste\r\n
comment4.params=
comment4.target=boolean\ estVide()
comment4.text=\r\n\ Teste\ si\ cette\ liste\ est\ vide.\r\n\r\n\ @return\ true\ si\ cette\ liste\ est\ vide,\ false\ sinon.\r\n
comment5.params=
comment5.target=boolean\ estPleine()
comment5.text=\r\n\ Teste\ si\ cette\ liste\ est\ pleine.\ \r\n\r\n\ @return\ true\ si\ cette\ liste\ est\ pleine,\ false\ sinon.\r\n
comment6.params=
comment6.target=java.lang.Object\ getElement()
comment6.text=\r\n\ Permet\ de\ consulter\ l'element\ courant\ (celui\ qui\ est\ se\ trouve\ a\ la\ \r\n\ position\ courante).\r\n\ \r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ vide\r\n\ CONSEQUENT\ \:\ cette\ liste\ et\ sa\ position\ courante\ demeurent\ inchangees.\r\n\ \r\n\ @return\ l'element\ courant\r\n\ @throws\ ListeVideException\ si\ cette\ liste\ est\ vide\ avant\ l'appel\r\n
comment7.params=
comment7.target=void\ setPosDebut()
comment7.text=\r\n\ Met\ la\ position\ courante\ sur\ l'element\ au\ debut\ de\ cette\ liste.\r\n\r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ vide\r\n\ \r\n\ @throws\ ListeVideException\ si\ cette\ liste\ est\ vide\ avant\ l'appel\r\n
comment8.params=
comment8.target=void\ setPosFin()
comment8.text=\r\n\ Met\ la\ position\ courante\ sur\ l'element\ a\ la\ fin\ de\ cette\ liste.\r\n\ \r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ vide\r\n\ \r\n\ @throws\ ListeVideException\ si\ cette\ liste\ est\ vide\ avant\ l'appel\r\n
comment9.params=
comment9.target=boolean\ setPosPrecedent()
comment9.text=\r\n\ Met\ la\ position\ courante\ sur\ l'element\ qui\ precede\ l'element\ courant.\r\n\ Si\ la\ position\ courante\ est\ au\ debut\ avant\ l'appel,\ elle\ demeure\ \r\n\ inchangee.\r\n\ \r\n\ ANTECEDENT\ \:\ cette\ liste\ ne\ doit\ pas\ etre\ vide\r\n\ \r\n\ @return\ true\ si\ la\ position\ courante\ a\ ete\ deplacee\ sur\ le\ precedent,\ \r\n\ \ \ \ \ \ \ \ \ false\ sinon\ (elle\ etait\ deja\ au\ debut)\r\n\ @throws\ ListeVideException\ si\ cette\ liste\ est\ vide\ avant\ l'appel\r\n
numComments=17
